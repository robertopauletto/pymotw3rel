<?xml version="1.0" encoding="Latin-1"?>
<target>3</target>
<categoria>Strutture Dati</categoria><!-- # tag <descrizione> contiene le voci per la tabella di riepilogo iniziale -->
<!-- # tag <titolo_1> titolo principale -->
<!-- # tag <titolo_1> titolo principale -->
<!-- tag <testo_normale> contiene il testo normale dell'articolo -->
<!-- tag <titolo_2> contiene il testo per l'intestazione di un paragrafo -->
<!-- tag <py_code> contiene il testo che rappresenta delle istruzioni python -->
<!-- tag <py_output> contiene il testo che rappresenta l'outpuy di uno script python -->
<!-- tag <vedi_anche> contiene il testo che rappresentano i riferimenti esterni -->
<documento_tradotto>
<titolo_1>
array - Sequenza di dati di tipo fisso
</titolo_1>
<descrizione>
Gestire sequenze di dati numerici di tipo fisso con efficacia

</descrizione>
<testo_normale>
Il modulo <strong>array</strong> definisce una struttura di dati in sequenza che ricorda parecchio una <code>list</code> a eccezione del fatto che tutti i membri devono essere dello stesso tipo primitivo. I tipi supportati sono tutti quelli numerici o altri tipi primitivi con dimensione fissa tipo i bytes.
</testo_normale>
<tabella_semplice>
CODICE;TIPO;DIMENSIONE MINIMA (byte)
b;int;1
B;int;1
h;signed short;2
H;unsigned short;2
i;signed int;2
I;usigned int;2
l;signed long;4
L;unsigned long;4
q;signed long;4
Q;unsigned long;4
f;float;4
d;double float;8
</tabella_semplice>
<testo_normale>
SI faccia riferimento alla documentazione della libreria standard di <a href="https://pymotw.com/3/array/index.html#module-array">array</a> per un elenco completo dei codici di tipo.
</testo_normale>
<titolo_2>
Inizializzazione
</titolo_2>
<testo_normale>
Un <strong>array</strong> viene istanziato con un parametro che ne descrive il tipo di dati consentito, e, possibilmente, una sequenza di inizializzazione di dati da conservare nell'array.
</testo_normale>
<py_code>
# array_string.py
</py_code>
<testo_normale>
In questo esempio, l'array è configurato per contenere una sequenza di byte e viene inizializzato con una semplice stringa di byte.
</testo_normale>
<py_output>
$ python3 array_string.py
</py_output>
<titolo_2>
Manipolare Array
</titolo_2>
<testo_normale>
Un <strong>array</strong> può essere esteso o altrimenti manipolato allo stesso modo delle altre sequenze di Python.
</testo_normale>
<py_code>
# array_sequence.py
</py_code>
<testo_normale>
Le operazioni supportare comprendono lo <em>slicing</em>, l'iterazione e l'aggiunta in coda di elementi.
</testo_normale>
<py_output>
$ python3 array_sequence.py
</py_output>
<titolo_2>
Array e File
</titolo_2>
<testo_normale>
Il contenuto di un array può essere scritto e letto da un file usando i metodi built-in scritti con efficacia allo scopo.
</testo_normale>
<py_code>
# array_file.py
</py_code>
<testo_normale>
Questo esempio illustra una lettura di dati "grezzi", direttamente dal file binario contro una lettura in un nuovo array convertendo poi i byte nel tipo appropriato.
</testo_normale>
<py_output>
$ python3 array_file.py
</py_output>
<testo_normale>
<code>tofile()</code> utilizza <code>tobytes()</code> per formattare i dati e <code>fromfile()</code> utilizza <code>frombytes()</code> per convertirli nuovamente in una istanza di array.
</testo_normale>
<py_code>
# array_tobytes.py
</py_code>
<testo_normale>
Sia <code>tobytes()</code> che <code>frombytes()</code> lavorano su stringhe di byte, non su stringhe unicode.
</testo_normale>
<py_output>
$ python3 array_tobytes.py
</py_output>
<titolo_2>
Alternare l'Ordine dei Byte
</titolo_2>
<testo_normale>
Se i dati nell'array non sono nell'ordine di byte nativo, oppure occorre scambiarli prima di scriverli in un file destinato a un sistema con un ordine di byte diverso (oppure attraverso la rete), è possibile convertire l'intero array senza iterare attraverso gli elementi da Python.
</testo_normale>
<py_code>
# array_byteswap.py
</py_code>
<testo_normale>
Il metodo <code>byteswap()</code> scambia l'ordine dei byte degli elementi dell'array all'interno di C, il che è molto più efficiente dell'iterare attraverso i dati in Python.
</testo_normale>
<py_output>
$ python3 array_byteswap.py
</py_output>
<vedi_anche>
http://docs.python.org/3.5/library/array.html|array|La documentazione della libreria standard per questo modulo.
struct.html|struct|Il modulo struct
http://www.scipy.org/|Numerical Python| NumPy è una libreria Python per lavorare con efficacia con grandi insiemi di dati
riferimenti_moduli_modificati.html#array|Note di portabilità per array|
</vedi_anche>
</documento_tradotto>
