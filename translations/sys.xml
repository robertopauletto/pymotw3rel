<?xml version="1.0" encoding="Latin-1"?>
<categoria>Caratteristiche della fase di esecuzione</categoria><!-- # tag <descrizione> contiene le
voci per la tabella di riepilogo iniziale -->
<!-- # tag <titolo_1> titolo principale -->
<!-- # tag <titolo_1> titolo principale -->
<!-- tag <testo_normale> contiene il testo normale dell'articolo -->
<!-- tag <titolo_2> contiene il testo per l'intestazione di un paragrafo -->
<!-- tag <py_code> contiene il testo che rappresenta delle istruzioni python -->
<!-- tag <py_output> contiene il testo che rappresenta l'outpuy di uno script python -->
<!-- tag <vedi_anche> contiene il testo che rappresentano i riferimenti esterni -->
<indicizza>no</indicizza>
<documento_tradotto>
<titolo_1>
sys - Configurazione Specifica al Sistema
</titolo_1>
<descrizione>
Fornisce operazioni e configurazioni specifiche al sistema.

</descrizione>
<testo_normale>
Il modulo <strong>sys</strong> include un pacchetto di servizi per esaminare o modificare la configurazione dell'interprete in fase di esecuzione e risorse per interagire con il sistema operativo al di fuori del programma corrente.
</testo_normale>
<testo_normale>
<ul>
    <a href ='#interprete'>Impostazioni dell'interprete</a>
    <ul>
        <a href='#build-time-info'>Informazioni di Versione in Fase di Compilazione</a>
        <a href='#implem'>Implementazioni Interprete</a>
        <a href='#opzcmd'>Opzioni da Riga di Comando</a>
        <a href='#unicodedef'>Unicode Predefiniti</a>
        <a href='#interprompt'>Prompt Interattivi</a>
        <a href='#implem'>Agganci di Visualizzazione</a>
        <a href='#implem'>Locazioni di Installazione</a>
    </ul>
</ul>
<ul>
    <a href ='#runtimeenv'>Ambiente in Fase di Esecuzione</a>
    <ul>
        <a href='#cmdargs'>Argomenti da Riga di Comando</a>
        <a href='#inpoutstr'>Flussi in Entrata e Uscita</a>
        <a href='#retstat'>Stato Ritornato</a>
    </ul>
</ul>
<ul>
    <a href ='#memmng'>Gestione e Limiti di Memoria
    <ul>
        <a href='#memmng-refcount'>Conteggio Riferimenti</a>
        <a href='#memmng-objsize'>Dimensione Oggetti</a>
        <a href='#memmng-recursion'>Ricorsione</a>
        <a href='#memmng-maxval'>Valori Massimi</a>
        <a href='#memmng-float'>Valori a Virgola Mobile</a>
        <a href='#memmng-integers'>Valori Interi</a>
        <a href='#memmng-byteordering'>Ordinamento Byte</a>

    </ul>
</ul>
<ul>
    <a href ='#excmng'>Gestione Eccezioni
    <ul>
        <a href='#excmng-unhandled'>Eccezioni non Gestite</a>
        <a href='#excmng-current'>Eccezione Corrente </a>
        <a href='#excmng-previous'>Eccezione Interattiva Precedente</a>
    </ul>
</ul>
<ul>
    <a href ='#threadsupp'>Supporto Thread di Basso Livello
    <ul>
        <a href='#threadsupp-switch'>Eccezioni non Gestite</a>
        <a href='#threadsupp-debug'>Eccezione Corrente </a>
    </ul>
</ul>
<ul>
    <a href ='#modimport'>Moduli e Import
    <ul>
        <a href='#modimport-refcount'>Conteggio Riferimenti</a>
        <a href='#modimport-objsize'>Dimensione Oggetti</a>
        <a href='#modimport-recursion'>Ricorsione</a>
        <a href='#modimport-maxval'>Valori Massimi</a>
        <a href='#modimport-float'>Valori a Virgola Mobile</a>
        <a href='#modimport-integers'>Valori Interi</a>
        <a href='#modimport-byteordering'>Ordinamento Byte</a>
    </ul>
</ul>
<ul>
    <a href ='#tracing'>Tracciare un Programma in Esecuzione
    <ul>
        <a href='#tracing-unhandled'>Eccezioni non Gestite</a>
        <a href='#tracing-current'>Eccezione Corrente </a>
        <a href='#tracing-previous'>Eccezione Interattiva Precedente</a>
    </ul>
</ul>





</testo_normale>
<titolo_2>
Impostazioni dell'Interprete
</titolo_2>
<testo_normale>
<strong>sys</strong> contiene attributi e funzioni per accedere alle impostazioni di configurazione in fase di compilazione o di esecuzione per l'interprete.
<a name=build-time-info></a>
</testo_normale>
<titolo_4>
Informazioni di Versione di Compilazione
</titolo_4>
<testo_normale>
La versione usata per costruire l'interprete C è disponibile in alcune forme, <code>sys.version</code> è una stringa leggibile dall'umano che in genere include il numero di versione completo e le informazioni sulla data di compilazione, sul compilatore e la piattaforma. <code>sys.hexversion</code> è pià semplice da usare per verificare la versione dell'interprete visto che è un semplice intero. Quando formattato usando <code>hex()</code>, è chiaro che parti di <code>sys.hexversion</code> provengono dalle informazioni di versione visibili anche più chiaramente con <code>sys.version_info</code> (una tupla di cinque parti che rappresenta solo in numero di versione). La versione API C separata usata dall'interprete corrente viene salvata in <code>sys.api_version</code>.
</testo_normale>
<py_code>
# sys_version_values.py
</py_code>
<testo_normale>
Tutti i valori dipendono dall'effettivo interprete usato per eseguire il programma di esempio
</testo_normale>
<py_output>
$ python3 sys_version_values.py
</py_output>
<testo_normale>
La piattaforma del sistema operativo usata per costruire l'interprete viene salvata com <code>sys.platform</code>.
</testo_normale>
<py_code>
# sys_platform.py
</py_code>
<testo_normale>
Per la maggior parte dei sistemi Unix, il valore viene formato combinando il risultato di <code>uname -s</code> con la prima parte della versione in <code>uname -r</code>. Per altri sistemi operativi esiste una tabella di valori scritta nel codice.
</testo_normale>
<py_output>
$ python3 sys_platform.py
</py_output>
<vedi_anche>
#|Valori di Piattaforma|Valori scritti nel codice di <code>sys.platform</code> per sistemi senza <code>uname</code>.
</vedi_anche>
<titolo_4>
Implementazione Interprete
</titolo_4>
<testo_normale>
L'interprete CPython è una delle parecchie Implementazioni del linguaggio Python. <code>sys.implementation</code> viene fornito per rilevare l'implementazione corrente per le librerie che devono gestire qualsiasi differenza negli interpreti.
</testo_normale>
<py_code>
# sys_implementation.py
</py_code>
<testo_normale>
<code>sys.implementation.version</code> è uguale a <code>sys.version_info</code> per CPython, ma sarà diverso per altri interpreti.
</testo_normale>
<py_output>
$ python3 sys_implementation.py
</py_output>
<vedi_anche>
https://www.python.org/dev/peps/pep-0421|PEP 421|Aggiungere <code>sys.implementation</code>
</vedi_anche>
<titolo_4>
Opzioni da Riga di Comando
</titolo_4>
<testo_normale>
L'interprete CPython accetta parecchie opzioni da riga di comando per controllare il suo comportamento, elencate nella seguente tabella
</testo_normale>
<tabella_semplice>
OPZIONE;DESCRIZIONE
<code>-B</code>;non scrivere file <code>.py[co]</code> in importazione.
<code>-b</code>;emette avvertimenti circa la conversione di byte in stringa senza una propria decodifica e confronta i byte con le stringhe
<code>-bb</code>;converte gli avvertimenti di byte in errori
<code>-d</code>;opzione di debug dal parser
<code>-E</code>;ignora le variabili di ambiente PYTHON* (tipo PYTHONPATH)
<code>-i</code>;ispezione interattiva dopo l'esecuzione dello script
<code>-O</code>;ottimizza leggermente il bytecode generato
<code>-OO</code>;rimuovi le <em>doc string</em> oltre alle ottimizzazioni di <code>-O</code>
<code>-s</code>;non aggiungere la directory sito utente a <code>sys.path</code>
<code>-S</code>;non eseguire <code>'import site'</code> all'inizializzazione
<code>-t</code>;emette avvertimenti circa utilizzi inconsistenti delle tabulazioni
<code>-tt</code>;emette errori circa utilizzi inconsistenti delle tabulazioni
<code>-v</code>;verboso
</tabella_semplice>
<testo_normale>
Alcune di esse sono a disposizione per la verifica dai programmi in <code>sys.flags</code>
</testo_normale>
<py_code>
# sys_flags.py
</py_code>
<testo_normale>
Si possono fare esperimenti con <code>sys_flags.py</code> per imparare in che modo le opzioni da riga di comando sono mappate con le impostazioni dei flag.
</testo_normale>
<py_output>
$ python3 -S -E -b sys_flags.py
</py_output>
<titolo_4>
Unicode Predefinito
</titolo_4>
<testo_normale>
Per ottenere la codifica Unicode predefinita usata dall'interprete si usi <code>gedefaultencoding()</code>. Il valore viene impostato durante l'inizializzazione, e non può essere modificato.
</testo_normale>
<testo_normale>
La codifica predefinita intena e quella del file system potrebbe essere diversa per alcuni sistemi operativi, quindi esiste un modo separato per ottenere l'impostazione per il file system: <code>getfilesystemencoding()</code> ritorna un valore specifico al sistema operativo (non specifico al file system).
</testo_normale>
<py_code>
# sys_unicode.py
</py_code>
<testo_normale>
Invece che dipendere dalla codifica globale predefinita, la maggior parte degli esperti Unicode raccomanda di rendere l'applicazione esplicitamente consapevole dell'Unicode usato. Il che produce due benefici: diverse codifiche Unicode per diverse sorgenti dati possono essere gestite con più chiarezza, e il numero di assunzioni circa le codifiche nel codice dell'applicazione è ridotto.
</testo_normale>
<py_output>
$ python3 sys_unicode.py
</py_output>
<titolo_4>
Prompt Interattivo
</titolo_4>
<testo_normale>
L'interprete interattivo usa due prompt separati per indicare il livello in input predefinito <code>ps1</code> e la "continuazione" di una istruzione multiriga (<code>ps2</code>). I valori sono usati solo dall'interprete interattivo.
</testo_normale>
<py_output>
>>> import sys
>>> sys.ps1
'>>> '
>>> sys.ps2
'... '
>>>
</py_output>
<testo_normale>
Entrambi i prompt possono essere cambiati in una stringa differente
</testo_normale>
<py_output>
>>> sys.ps1 = '::: '
::: sys.ps2 = '~~~ '
::: for i in range(3):
~~~     print(i)
~~~
0
1
2
:::
</py_output>
<testo_normale>
In alternativa, qualunque oggetto che possa essere convertito a stringa (via <code>__str__</code>) può essere usato come prompt.
</testo_normale>
<py_code>
# sys_ps1.py
</py_code>
<testo_normale>
<code>LineCounter</code> tiene traccia di quante volte è stato usato, quindi il numero nel prompt aumenta ogni volta.
</testo_normale>
<py_output>
$ python
Python 3.6.5 (default, Apr  1 2018, 05:46:30)
[GCC 7.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> from sys_ps1 import LineCounter
>>> import sys
>>> sys.ps1 = LineCounter()
(  1)>
(  2)>
(  3)>
(  4)>
</py_output>
<titolo_4>
Agganci di Visualizzazione
</titolo_4>
<testo_normale>
<code>sys.displayhook</code> viene chiamata dall'interprete interattivo ogni volta che l'utente digita una espressione. Il risultato della valutazione dell'espressione viene passato come solo argomento della funzione.
</testo_normale>
<py_code>
# sys_displayhook.py
</py_code>
<testo_normale>
Il valore predefinito, salvato il <code>sys.__displayhook__</code>, stampa il risultato a <code>stdout</code> e lo salva in <code>_</code> per una facile recupero per usi futuri.
</testo_normale>
<py_output>
$ python
Python 3.6.5 (default, Apr  1 2018, 05:46:30)
[GCC 7.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import sys_displayhook
installazione
>>> 1 + 2

  Precedente: <sys_displayhook.ExpressionCounter object at 0x7f236bdd7828>
  Nuovo     : 3

3
(  1)> 'abc'

  Precedente: 3
  Nuovo     : abc

'abc'
(  2)> 'abc'

  Precedente: abc
  Nuovo     : abc

'abc'
(  2)> 'abc' * 3

  Precedente: abc
  Nuovo     : abcabcabc

'abcabcabc'
(  3)>
</py_output>
<titolo_4>
Locazione di installazione
</titolo_4>
<testo_normale>
Il percorso all'effettivo programma interprete è disponibile in <code>sys.executable</code> su tutti i sistemi nei quali l'avere un percorso per l'interprete ha senso. Questo può essere utile per assicurarsi che venga usato l'interprete corretto, e fornisce anche indizi circa i percorsi che potrebbero essere impostati in base alla locazione dell'interprete.
</testo_normale>
<testo_normale>
<code>sys.prefix</code> fa riferimento alla directory genitore dell'installazione dell'interprete. In genere include le directory <code>bin</code> e <code>lib</code>  rispettivamente per gli eseguibili e per i moduli installati.
</testo_normale>
<py_code>
# sys_locations.py
</py_code>
<testo_normale>
Questo risultato di esempio è stato prodotto su di un sistema Unix con una installazione di Ubuntu 18.04
</testo_normale>
<py_output>
$ python3 sys_locations.py
</py_output>
<a name ='#runtimeenv'></a>
<titolo_2>
Ambiente in Fase di Esecuzione
</titolo_2>
<testo_normale>
<strong>sys</strong> fornisce API a basso livello per interagire con il sistema all'esterno di una applicazione, accettando argomenti da riga di comando, accedendo all'input utente e passando messaggi e volori di stato all'utente.
</testo_normale>
<a name='#cmdargs'></a>
<titolo_4>
Argomenti da Riga di Comando
</titolo_4>
<testo_normale>
Gli argomenti catturati dall'interprete sono elaborati qui e non passati al programma che sta per essere eseguito. Qualunque opzione e argomento rimanente, compreso il nome dello script stesso, sono salvati in <code>sys.argv</code> in caso che il programma abbia bisogno di usarli.
</testo_normale>
<py_code>
# sys_argv.py
</py_code>
<testo_normale>
Nel terzo esempio, l'opzione <code>-u</code> è compresa dall'interprete e non è passata al programma che sta per essere eseguito.
</testo_normale>
<py_output>
$ python3 sys_argv.py
</py_output>
<py_output>
$ python3 sys_argv.py -v foo blah
</py_output>
<py_output>
$ python3 -u sys_argv.py
</py_output>
<a name='#inpoutstr'></a>
<titolo_4>
Flussi di Input ed Output
</titolo_4>
<testo_normale>
Seguendo il paradigma Unix, i programmi Python possono accedere nella modalità predefinita a tre descrittori di file.
</testo_normale>
<py_code>
# sys_stdio.py
</py_code>
<testo_normale>
<code>stdin</code> è la modalità predefinita per leggere input, in genere da una console ma anche da altri programmi tramite una <a href='https://www.wikiwand.com/it/Pipeline' target='_blank'><em>pipeline</em></a>. <code>stdout</code> è il modo predefinito per scrivere output per un utente (alla console) o per inviarlo al programma successivo via <em>pipeline</em>. <code>stderr</code> è destinato all'uso per messaggi di errore o avvertimento.
</testo_normale>
<py_output>
$ cat sys_stdio.py | python3 -u sys_stdio.py
</py_output>
<a name='retstat'></a>
<titolo_4>
Stato Restituito
</titolo_4>
<testo_normale>
Per ritornare un codice di uscita da un programma, si passi un valore intero a <code>sys.exit()</code>.
</testo_normale>
<py_code>
# sys_exit.py
</py_code>
<testo_normale>
Un valore diverso da zero significa che il programma è uscito con un errore.
</testo_normale>
<py_output>
$ python3 sys_exit.py 0 ; echo "Uscito $?"
</py_output>
<py_output>
$ python3 sys_exit.py 1 ; echo "Uscito $?"
</py_output>
<a name='memmng'></a>
<titolo_2>
Gestione e Limiti di Memoria
</titolo_2>
<testo_normale>
<strong>sys</strong> contiene parecchie funzioni per comprendere e controllare l'uso della memoria.
</testo_normale>
<a name='memmng-refcount'></a>
<titolo_4>
Conteggio Riferimenti
</titolo_4>
<testo_normale>
L'implementazione primaria di Python (CPython) usa il <em>conteggio dei riferimenti</em> e <a href='https://www.wikiwand.com/it/Garbage_collection' target='_blank'><em>garbage collection</em></a> per la gestione automatica della memoria. Un oggetto viene automaticamente marcato come raccoglibile quando il conteggio dei suoi riferimenti scende a zero. Per esaminare il conteggio di riferimenti per un oggetto esistente, si usi <code>getrefcount()</code>.
</testo_normale>
<py_code>
# sys_getrefcount.py
</py_code>
<testo_normale>
Il valore riportato è in realtà maggiore di una unità rispetto a quanto atteso in quanto vi è un riferimento temporaneo all'oggetto riferto da <code>getrefcount()</code> stesso.
</testo_normale>
<py_output>
$ python3 sys_getrefcount.py
</py_output>
<vedi_anche>
gc.html|gc|Controlla il <em>garbage collector</em> tramite funzioni esposte nel modulo <strong>gc</strong>
</vedi_anche>
<a name='memmng-objcount'></a>
<titolo_4>
Dimensione Oggetti
</titolo_4>
<testo_normale>
Sapere quanti riferimenti ha un oggetto può forse aiutare per trovare cicli o <a href='https://www.wikiwand.com/it/Memory_leak' target='_blank'><em>memory leak</em></a>, ma non è abbastanza per determinare quali oggetti stanno consumando la <em>maggior</em> parte di memoria. Questo richiede la conoscenza della dimensione degli oggetti.
</testo_normale>
<py_code>
# sys_getsizeof.py
</py_code>
<testo_normale>
<code>getsizeof()</code> riporta la dimensione di un oggetto in byte.
</testo_normale>
<py_output>
$ python3 sys_getsizeof.py
</py_output>
<testo_normale>
La dimensione restituita per una classe personalizzata non comprende la dimensione dei valori degli attributi.
</testo_normale>
<py_code>
# sys_getsizeof_object.py
</py_code>
<testo_normale>
Si potrebbe avere una falsa imporessione dell'ammontare di memoria che si sta comsumando.
</testo_normale>
<py_output>
$ python3 sys_getsizeof_object.py
</py_output>
<testo_normale>
Per una stima più completa dello spazio usato da una classe si fornisca un metodo <code>__sizeof__()</code> per calcolare il valore aggregando le dimensioni degli attributi di un oggetto.
</testo_normale>
<py_code>
# sys_getsizeof_custom.py
</py_code>
<testo_normale>
Questa versione aggiunge alla dimensione base dell'oggetto quelle di tutti gli attributi conservati in <code>__dict__</code>.
</testo_normale>
<py_output>
$ python3 sys_getsizeof_custom.py
</py_output>
<a name='memmng-recursion'></a>
<titolo_4>
Ricorsione
</titolo_4>
<testo_normale>
Il consentire ricorsioni infinite in Python potrebbe tradurre uno <a href='https://www.wikiwand.com/it/Stack_overflow' target='_blank'><em>stack overflow</em></a> nell'interprete stesso provocando il <em>crash</em> dell'applicazione. Per eliminare questa situazione l'interprete fornisce un modo per controllare la profondità massima di ricorsione, usando <code>setrecursionlimit()</code> e <code>getrecursionelimit()</code>.
</testo_normale>
<py_code>
# sys_recursionlimit.py
</py_code>
<testo_normale>
Una volta che la dimensione dello <em>stack</em> raggiungete il limite di ricorsione, l'interprete solleva una eccezione <code>RuntimeError</code> in modo che il programma abbia l'opportunità di gestire la situazione.
</testo_normale>
<py_output>
$ python3 sys_recursionlimit.py
</py_output>
<a name='memmng-maxval'></a>
<titolo_4>
Valori Massimi
</titolo_4>
<testo_normale>
Asseieme ai valori configurabili in vase di esecuzione, <strong>sys</strong> include variabili per definire i valori massimi per i tipi che può variare da sistema a sistema.
</testo_normale>
<py_code>
# sys_maximums.py
</py_code>
<testo_normale>
<code>maxsize</code> è la dimensione massima di lista, dizionario, stringa o altra struttura dati dettata dal tipo di dimensione dell'interprete C, <code>maxunicode</code> è il più grande punto Unicode intero supportato dall'interprete così come attualmente configurato.
</testo_normale>
<py_output>
$ python3 sys_maximums.py
</py_output>
<a name='memmng-float'></a>
<titolo_4>
Valori a Virgola Mobile
</titolo_4>
<testo_normale>
La struttura <code>float_info</code> contiene informazioni circa la rappresentazione del tipo a virgola mobile usato dall'interprete, basato sulla sottostante implementazione di <code>float</code> del sistema
</testo_normale>
<py_code>
# sys_float_info.py
</py_code>
<testo_normale>
Questi valori dipendono dal compilatore e dal sistema sottostante. Questi esempi sono stati prodotti con un PC con SO Linux Ubuntu 18.04 con Intel Core i5.
</testo_normale>
<py_output>
$ python3 sys_float_info.py
</py_output>
<a name='memmng-integers'></a>
<titolo_4>
Valori Interi
</titolo_4>
<testo_normale>
La struttura <code>int_info</code> contiene le informazioni circa la rappresentazoine interna degli interi usati dall'interprete.
</testo_normale>
<py_code>
# sys_int_info.py
</py_code>
<testo_normale>
Questi esempi sono stati prodotti con un PC con SO Linux Ubuntu 18.04 con Intel Core i5.
</testo_normale>
<py_output>
$ python3 sys_int_info.py
</py_output>
<testo_normale>
Il tipo C usato per conservare interi internamente è determinato quando l'interprete viene compilato. Le architetture a 64 bit usano automaticamente interi a 30 bit nella modalità predefinita, e  possono essere abilitati per le architetture a 32 bit con il flag di configurazione <code>--enable-big-digits</code>.
</testo_normale>
<a name='memmng-byteordering'></a>
<titolo_4>
Ordinamento Byte
</titolo_4>
<testo_normale>
<code>byteorder</code> viene impostato all'ordinamento byte nativo.
</testo_normale>
<py_code>
# sys_byteorder.py
</py_code>
<testo_normale>
Il valore può essere <code>big</code> per big-endian e <code>little</little> per little-endian
</testo_normale>
<py_output>
$ python3 sys_byteorder.py
</py_output>

<a name=''></a>
</titolo_2>
<testo_normale>

</testo_normale>
<a name=''></a>
<titolo_4>

</titolo_4>
<testo_normale>

</testo_normale>
<vedi_anche>
https://docs.python.org/3.5/library/pwd.html|pwd|La documentazione della libreria standard per questo modulo.
</vedi_anche>
</documento_tradotto>
