<?xml version="1.0" encoding="Latin-1"?>
<categoria>persistenza e scambio dati</categoria>
<indicizza>sì</indicizza>
<documento_tradotto>
<titolo_1>
xml.etree.ElementTree -  Genera ed elabora documenti XML
</titolo_1>
<descrizione>
La libreria ElementTree include strumenti per elaborare XML usando API basate su eventi e documento, cercando i documenti elaborati con espressioni XPath, e creando o modificando documenti esistenti.

</descrizione>
<titolo_2>
Elaborare un Documento XML
</titolo_2>
<testo_normale>
I documenti XML elaborati sono rappresentati in memoria da oggetti <code>ElementTree</code> e <code>Element</code> connessi in una struttura ad albero basata sul modo nel quale i nodi nel documento XML sono annidati.
</testo_normale>
<testo_normale>
L'elaborazione di un intero documento con <code>parse()</code> ritorna una istanza di <code>ElementTree</code>. L'alberatura conosce tutto circa i dati del documento in input, e i nodi dell'albero possono essere cercati o manipolati sul posto. Mentre questa flessibilità può rendere il lavoro con i documenti elaborati più conveniente, tipicamente richiede più memoria rispetto a un approccio di elaborazione basato su  eventi, visto che l'intero documento deve essere caricato tutto in una  volta.
</testo_normale>
<testo_normale>
L'impronta di memoria di piccoli, semplici documenti come questo elenco di podcast rappresentati con il formato <a href='https://www.wikiwand.com/it/OPML' target='_blank'>OPML</a>  non è significativo.
</testo_normale>
<py_code>
# podcasts.opml
</py_code>
<testo_normale>
Per elaborare il file, si passi un <em>handle</em> di file aperto a <code>parse()</code>
</testo_normale>
<py_code>
# ElementTree_parse_opml.py
</py_code>
<testo_normale>
Verranno letti i dati, elaborato l'XML, e ritornato un oggetto <code>ElementTree</code>
</testo_normale>
<py_output>
$ python3 ElementTree_parse_opml.py
</py_output>
<titolo_2>
Attraversare l'Albero Elaborato
</titolo_2>
<testo_normale>
Per vistare nell'ordine tutti i figli nell'ordine, si usi <code>iter()</code> per creare un generatore che itera attraverso l'istanza di <code>ElementTree</code>
</testo_normale>
<py_code>
# ElementTree_dump_opml.py
</py_code>
<testo_normale>
Questo esempio stampa l'intero albero, un tag alla volta.
</testo_normale>
<py_output>
$ python3 ElementTree_dump_opml.py
</py_output>
<testo_normale>
Per stampare solo i gruppi di nomi e URL dei feed per i podcast, si tralasciano tutti i dati nella sezione di intestazione iterando solo attraverso i nodi <code>outline</code> e stampando gli attributi <code>text</code> e <code>xmlUrl</code> recuperandone i valori nel dizionario <code>attrib</code>
</testo_normale>
<py_code>
# ElementTree_show_feed_urls.py
</py_code>
<testo_normale>
L'argomento di <code>iter()</code> <code><code>outline</code></code> indica che l'elaborazione viene limitata solo ai nodi con il tag <code><code>outline</code></code>.
</testo_normale>
<py_output>
$ python3 ElementTree_show_feed_urls.py
</py_output>
<titolo_2>
Trovare Nodi in un Documento
</titolo_2>
<testo_normale>
L'attraversare un intero albero in questo modo, cercando i nodi che interessano, può essere incline a errori. L'esempio precedente ha dovuto verificare ogni nodo <code>outline</code> per determinare se si trattasse di un gruppo (nodi con un solo attributo <code>text</code>) o podcast (con entrambi gli attributi <code>text</code> e <code>xmlUrl</code>). Per produrre una semplice lista di URL di feed di podcast, senza nomi o gruppi, la logica potrebbe essere semplificata usando <code>findall()</code> per trovare i nodi con caratteristiche di ricerca più descrittive.
</testo_normale>
<testo_normale>
Come primo passaggio per convertire la prima versione si può usare un argomento <a href='https://www.wikiwand.com/it/XPath' target='_blank'>XPath</a> per trovare tutti i nodi <code>outline</code>
</testo_normale>
<py_code>
# ElementTree_find_feeds_by_tag.py
</py_code>
<testo_normale>
La logica in questa versione non presenta differenze sostanziali con la versione che usa <code>getiterator()</code>. Deve comunque verificare la presenza di'<code>URL</code>, eccetto che non stampa il nome del gruppo quando <code>URL</code> non viene trovato.
</testo_normale>
<py_output>
$ python3 ElementTree_find_feeds_by_tag.py
</py_output>
<testo_normale>
E' possibile trarre vantaggio dal fatto che i nodi <code>outline</code> sono nidificati solo due livelli più in profondità. Modificando il percorso di ricerca in <code>.//outline/outline</code> significa che il ciclo elaborerà solo il secondo livello dei nodi <code>outline</code>
</testo_normale>
<py_code>
# ElementTree_find_feeds_by_structure.py
</py_code>
<testo_normale>
Ci si attende che tutti i nodi <code>outline</code> annidati due livelli in profondità nell'input abbiano un attributo <code>xmlURL</code> che si riferisce al feed del podcast, quindi il ciclo può evitare di cercare l'attributo prima di usarlo.
</testo_normale>
<py_output>
$ python3 ElementTree_find_feeds_by_structure.py
</py_output>
<testo_normale>
Questa versione è limitata alla struttura esistente, tuttavia, quindi se i nodi <code>outline</code> sono ristrutturati in un albero più profondo non smetterebbe di funzionare.
</testo_normale>
<titolo_2>
Elaborare gli Attributi dei Nodi
</titolo_2>
<testo_normale>
Gli elementi ritornati da <code>findall()</code> e <code>iter()</code> sono oggetti <code>Element</code>, ognuno di essi rappresentante un node nell'albero XML. Ogni <code>Element</code> ha attributi per accedere ai dati estratti dall'XML. La cosa può essere illustrata con un esempio in qualche modo più contenuto del file in input.
</testo_normale>
<mk_xml_code_lineno>
<?xml version="1.0" encoding="UTF-8"?>
<top>
  <child>Testo normale.</child>
  <child_with_tail>Testo normale.</child_with_tail>testo "in coda".
  <with_attributes name="value" foo="bar" />
  <entity_expansion attribute="Questo &#38; Quello">
    Quello &#38; Questo
  </entity_expansion>
</top>

</mk_xml_code_lineno>
<testo_normale>
Gli attributi XML di un nodo sono disponibili nella proprietà <code>attrib</code>, che agisce come un dizionario
</testo_normale>
<py_code>
# ElementTree_node_attributes.py
</py_code>
<testo_normale>
Il nodo a riga 5 ha due attributi, <code>name</code> e <code>foo</code>.
</testo_normale>
<py_output>
$ python3 ElementTree_node_attributes.py
</py_output>
<testo_normale>
Il testo contenuto nei nodi è disponibile, assieme al testo in <code>tail</code> che si trova alla fine di un tag chiuso
</testo_normale>
<py_code>
# ElementTree_node_text.py
</py_code>
<testo_normale>
Il nodo <code>child</code> a riga 3 contiene testo incorporato e il nodo a riga 4 ha testo in coda, spazi compresi
</testo_normale>
<py_output>
$ python3 ElementTree_node_text.py
</py_output>
<testo_normale>
I riferimenti a entità XML nel documento sono convertiti negli appropriati caratteri prima che i valori siano ritornati
</testo_normale>
<py_code>
# ElementTree_entity_references.py
</py_code>
<testo_normale>
La conversione automatica consente di ignorare i dettagli di implementazione della rappresentazione di certi caratteri in un documento XML.
</testo_normale>
<py_output>
$ python3 ElementTree_entity_references.py
</py_output>
<titolo_2>
Monitorare Eventi Durante l'Elaborazione
</titolo_2>
<testo_normale>
L'altra API per elaborare documenti XML è basata sugli eventi. L'elaboratore genera eventi <code>start</code> per l'apertura ed eventi <code>end</code> per la chiusura di tag. I dati possono essere estratti dal documento durante la fase di elaborazione iterando sul flusso di eventi, il che è conveniente se non è necessario manipolare l'intero documento successivamente e non serve mantenere l'intero documento elaborato in memoria.
</testo_normale>
<testo_normale>
Gli eventi possono essere uno tra:
</testo_normale>
<tabella_semplice>
NOME EVENTO;DESCRIZIONE
<code>start</code>;E' stato rilevato un nuovo tag. E' stata elaborata la parentesi angolare di chiusura del tag, ma non il suo contenuto
<code>end</code>;La parentesi angolare di chiusura di un tag di chiusura è stata elaborata. Tutti i figli sono già stati elaborati.
<code>start-ns</code>;Inizia la dichiarazione di uno spazio dei nomi
<code>end-ns</code>;Finisce la dichiarazione di uno spazio dei nomi
</tabella_semplice>
<testo_normale>
<code>iterparse()</code> ritorna un iterabile che produce tuple contenenti il nome dell'evento e il nodo che ha scatenato l'evento.
</testo_normale>
<py_code>
# ElementTree_show_all_events.py
</py_code>
<testo_normale>
Nella modalità predefinita, sono eventi <code>end</code> sono generati. Per vedere altri eventi si passi l'elenco dei nomi degli eventi desiderati a <code>iterparse()</code>, come in questo esempio.
</testo_normale>
<py_output>
$ python3 ElementTree_show_all_events.py
</py_output>
<testo_normale>
Lo stile di elaborazione a eventi è più naturale per talune operazioni, come la conversione di input XML in qualche altro formato. Questa tecnica può essere usata per convertire la lista di podcast degli esempi precedenti da file XML a file CSV, in modo che possano essere caricati in un foglio elettronico o database.
</testo_normale>
<py_code>
# ElementTree_write_podcast_csv.py
</py_code>
<testo_normale>
Questo programma di conversione non deve mantenere l'intero file di input elaborato in memoria, e l'elaborazione di ciascun nodo mano a mano che viene rilevato è più efficiente
</testo_normale>
<py_output>
$ python3 ElementTree_write_podcast_csv.py
</py_output>
<titolo_2>
Creare un Costruttore di Albero Personalizzato
</titolo_2>
<testo_normale>
Un modo potenzialmente più efficace di gestire eventi di elaborazione è sostituire il comportamento standard del costruttore di albero con una versione personalizzata. L'elaboratore <code>XMLParser</code> usa <code>TreeBuilder</code> per elaborare l'XML e chiamare metodi su una classe destinazione per salvare i risultati. Il risultato usuale è una istanza di <code>ElementTree</code> creata in modalità predefinita dalla classe <code>TreeBuilder</code>. La sostituzione di <code>TreeBuilder</code> con un'altra classe consente di ricevere eventi prima che i nodi <code>Element</code> vengano istanziati, risparmiando quella porzione di elaborazione.
</testo_normale>
<testo_normale>
Questo convertitore XML -> CSV dalla sezione precedente può essere reimplementato come costruttore di albero
</testo_normale>
<py_code>
# ElementTree_podcast_csv_treebuilder.py
</py_code>
<testo_normale>
<code>PodcastListToCSV</code> implementa il protocollo <code>TreeBuilder</code>. Ogni volta che si incontra un nuovo tag XML, viene chiamato <code>start()</code> con il nome del tag e gli attributi. Quando si individua un tag di chiusura viene chiamato <code>end()</code> con il nome. In mezzo, viene chiamato <code>data()</code> quando un nodo ha del contenuto (ci si attende che il costruttore di albero mantenga aggiornata l'informazione del nodo "corrente"). Quando viene elaborato tutto l'input, viene chiamato <code>close()</code>. Può ritornare un valore, che verrà restituito all'utente di <code>TreeBuilder</code>
</testo_normale>
<py_output>
$ python3 ElementTree_podcast_csv_treebuilder.py
</py_output>
<titolo_2>
Elaborare Stringhe
</titolo_2>
<testo_normale>
Per lavorare piccole parti di testo XML, specialmente stringhe letterali che potrebbero essere incorporate nel sorgente di un programma, si usi <code>XML()</code> e la stringa che contiene il frammento XML sarà elaborata quale unico argomento.
</testo_normale>
<py_code>
# ElementTree_XML.py
</py_code>
<testo_normale>
Al contrario di <code>parse()</code> il valore ritornato è una istanza di <code>Element</code> invece che di <code>ElementTree</code>. <code>Element</code> supporta direttamente il protocollo di iterazione, quindi non serve chiamare <code>getiterator()</code>
</testo_normale>
<py_output>
$ python3 ElementTree_XML.py
</py_output>
<testo_normale>
Per XML strutturato che usa l'attributo <code>id</code> per identificare nodi univoci, <code>XMLID()</code> è un modo conveniente per accedere ai risultati elaborati
</testo_normale>
<py_code>
# ElementTree_XMLID.py
</py_code>
<testo_normale>
<code>XMLID()</code> ritorna l'albero elaborato come oggetto <code>Element</code>, assieme a un dizionario che mappa le stringhe dell'attributo <code>id</code> ai singoli nodi dell'albero
</testo_normale>
<py_output>
$ python3 ElementTree_XMLID.py
</py_output>
<titolo_2>
Costruire Documenti con Nodi Element
</titolo_2>
<testo_normale>
Oltre alle capacità di elaborazione, <strong>xml.etree.ElementTree</strong> supporta anche la creazione di documenti XML ben formati partendo da oggetti <code>Elemento</code> costruiti in una applicazione. La classe <code>Element</code> usata quanto si elabora un documento sa anche come generare una forma serializzata del suo contenuto, che poi può essere scritta verso un file o altro canale dati.
</testo_normale>
<testo_normale>
Ci sono tre funzioni di aiuto utili alla creazione di una gerarchia di nodi <code>Element</code>. <code>Element()</code> crea un nodo standard, <code>SubElement()</code> attacca un nuovo nodo a un genitore, <code>Comment()</code> crea un nodo che viene serializzato usando la sintassi XML per i commenti.
</testo_normale>
<py_code>
# ElementTree_create.py
</py_code>
<testo_normale>
Il risultato contiene solo i nodi XML nell'albero, non la dichiarazione con versione e codifica.
</testo_normale>
<py_output>
$ python3 ElementTree_create.py
</py_output>
<testo_normale>
Il carattere <code>&</code> nel testo di <code>child_with_entity_ref</code> viene convertito automaticamente nella sua entità di riferimento <code>&amp;amp;</code>
</testo_normale>
<titolo_2>
Stampa <em>Pretty-Printing</em> di XML
</titolo_2>
<testo_normale>
<code>ElementTree</code> non si preoccupa di formattare il risultato di <code>tostring()</code> per facilitare la lettura in quanto l'aggiunta di spazi, tabulazioni, caratteri di fine riga cambia il contenuto di un documento. Per rendere il risultato più leggibile, gli esempi restanti usano il metodo <code>toprettyxml()</code> del modulo <code>xml.dom.minidom</code> per rielaborare l'XML
</testo_normale>
<py_code>
# ElementTree_pretty.py
</py_code>
<testo_normale>
L'esempio aggiornato ora risulta così:
</testo_normale>
<py_code>
# ElementTree_create_pretty.py
</py_code>
<testo_normale>
e il risultato è più facile da leggere.
</testo_normale>
<py_output>
$ python3 ElementTree_create_pretty.py
</py_output>
<testo_normale>
Oltre alla spaziatura aggiuntiva utilizzata per formattare, <code>toprettyxml()</code> aggiunge anche la dichiarazione XML nel risultato.
</testo_normale>
<titolo_2>
Impostare le Proprietà di un Elemento
</titolo_2>
<testo_normale>
L'esempio precedente creava nodi con tag e contenuto testo, ma non impostava attributi per i nodi. Molti degli esempi precedenti lavoravano con un file OPML che elencava dei podcast e i loro feed. I nodi <code>outline</code> nell'albero usavano attributi per i nodi di gruppo e le proprietà del podcast. <code>ElementTree</code> può essere usato per costruire un file simile da un input CSV, impostando tutti gli attributi di un elemento in fase di costruzione dell'albero.
</testo_normale>
<py_code>
# ElementTree_csv_to_xml.py
</py_code>
<testo_normale>
Questo esempio usa due tecniche per impostare i valori di attributo dei nuovi nodi. Il nodo radice viene configurato usando <code>set()</code> per cambiare un attributo alla volta. Ai nodi podcast vengono assegnati tutti i propri attributi in una sola volta passando un dizionario al codice che costruisce il nodo
</testo_normale>
<py_output>
$ python3 ElementTree_csv_to_xml.py
</py_output>
<titolo_2>
Costruire Alberi da Elenchi di Nodi
</titolo_2>
<testo_normale>
Molteplici figli possono essere aggiunti assieme a una istanza di <code>Elemento</code> con il metodo <code>extend()</code>. L'argomento per <code>extend()</code> è un qualsiasi iterabile, compreso <code>list</code> o un'altra istanza di <code>Element</code>
</testo_normale>
<py_code>
# ElementTree_extend.py
</py_code>
<testo_normale>
Quando si passa un oggetto <code>list</code> i nodi nella lista sono aggiunti direttamente al nuovo genitore
</testo_normale>
<py_output>
$ python3 ElementTree_extend.py
</py_output>
<testo_normale>
Quando viene fornita un'altra istanza di <code>Element</code>, i figli di quel nodo sono aggiunti al nuovo genitore
</testo_normale>
<py_code>
# ElementTree_extend_node.py
</py_code>
<testo_normale>
In questo caso il nodo con tag <code>root</code> creato elaborando la stringa XML ha tre figli, i quali sono aggiunti al nodo <code>genitore</code>. Il nodo <code>root</code> non è parte dell'albero risultante.
</testo_normale>
<py_output>
$ python3 ElementTree_extend_node.py
</py_output>
<testo_normale>
E' importante capire che <code>extend()</code> non modifica alcuna relazione esistente padre-figlio tra i nodi. Se i valori passati a <code>extend()</code> esistono già da qualche parte nell'albero, essi saranno conservati, e ci saranno ripetizioni nel risultato.
</testo_normale>
<py_code>
# ElementTree_extend_node_copy.py
</py_code>
<testo_normale>
Con l'impostazione dell'attributo <code>id</code> di questi figli all'identificativo univoco Python di un oggetto si evidenzia il fatto che stessi oggetti nodo appaiono nell'albero risultante più di una volta
</testo_normale>
<py_output>
$ python3 ElementTree_extend_node_copy.py
</py_output>
<titolo_2>
Serializzare XML Verso un Canale
</titolo_2>
<testo_normale>
<code>tostring()</code> è implementato per scrivere un oggetto di tipo file in-memoria, quindi ritorna una stringa che rappresenta l'intero albero di elementi. Quando si lavora con grandi quantità di dati, scrivere direttamente a un <em>file handle</em> usando il metodo <code>write()</code> di <code>ElementTree</code>  richiede minor memoria e costituisce un uso più efficiente delle librerie I/O
</testo_normale>
<py_code>
# ElementTree_write.py
</py_code>
<testo_normale>
Questo esempio usa <code>sys.stdout.buffer</code> per scrivere alla console in luogo di <code>sys.stdout</code> poichè <code>ElementTree</code> produce byte codificati invece che una stringa Unicode. Si potrebbe anche scrivere verso un file in modalità binaria oppure un <em>socket</em>
</testo_normale>
<py_output>
$ python3 ElementTree_write.py
</py_output>
<testo_normale>
L'ultimo nodo nell'albero non contiene testo o sotto nodi, quindi viene scritto come un tag vuoto, <code>&lt;empty_child /&gt;</code>. <code>write()</code> riceve un metodo come argomento per controllare la gestione dei nodi vuoti.
</testo_normale>
<py_code>
# ElementTree_write_method.py
</py_code>
<testo_normale>
Sono supportati tre metodi
</testo_normale>
<tabella_spec_separatore>
MODALITA'|DESCRIZIONE
<code>xml</code>|Il metodo predefinito, produce <code>&lt;empty_child /&gt;</code>
<code>html</code>|Produce la coppia di tag, come richiesto nei documenti HTML (<code>&lt;empty_child&gt;&lt;empty_child /&gt;</code>)
<code>text</code>|Stampa solo il testo dei nodi, quindi salta completamente tag vuoti.
</tabella_spec_separatore>
<py_output>
$ python3 ElementTree_write_method.py
</py_output>
<vedi_anche>
https://docs.python.org/3.7/library/xml.etree.elementtree.html|xml.etree.ElementTree.html|La documentazione della libreria standard per questo modulo.
csv.html|csv|Legge e scrive file con valori separati da virgola
https://pypi.python.org/pypi/defusedxml|defusedxml|Un pacchetto con sistemazioni per le varie vulnerabilità di negazione del servizio causate da espansione di entità, utile per lavorare con dati XML non affidabili.
http://renesd.blogspot.com/2007/05/pretty-print-xml-with-python.html|Pretty print xml with python - indenting xml|Un suggerimento da Rene Dudfield per la stampa di XML in python in formato gradevole alla vista
http://effbot.org/zone/element-index.htm|ElementTree overview|La documentazione originale di Fredrick Lundh e collegamenti alle versioni di sviluppo della libreria ElementTree
http://www.ibm.com/developerworks/library/x-matters28/|Process XML in Python with ElementTree|Articolo dello sviluppatore IBM Dave Winer
http://www.w3.org/TR/xpath/|XML Path Language (XPath)|Una sintassi per identificare parti di un documento XML
http://effbot.org/zone/element-xpath.htm|XPath Support in ElementTree|Parte della documentazione originale di Fredrick Lundh per ElementTree
</vedi_anche>
</documento_tradotto>
