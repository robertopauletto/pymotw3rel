<?xml version="1.0" encoding="Latin-1"?>
<categoria>compressione e archiviazione dati</categoria><!-- # tag <descrizione> contiene le voci per la tabella di riepilogo iniziale -->
<!-- # tag <titolo_1> titolo principale -->
<!-- tag <testo_normale> contiene il testo normale dell'articolo -->
<!-- tag <titolo_2> contiene il testo per l'intestazione di un paragrafo -->
<!-- tag <py_code> contiene il testo che rappresenta delle istruzioni python -->
<!-- tag <py_output> contiene il testo che rappresenta l'output di uno script python -->
<!-- tag <vedi_anche> contiene il testo che rappresentano i riferimenti esterni -->
<!-- tag <lista> ogni riga all'interno del tag rappresenta una riga di una lista non ordinata'-->
<documento_tradotto>
<titolo_1>
zipfile - Accede a un Archivio ZIP
</titolo_1>
<descrizione>
Legge e scrive file compressi ZIP

</descrizione>
<testo_normale>
Il modulo <strong>zipfile</strong> può essere usato per manipolare file di archivio ZIP, il formato reso popolare dal programma per pc PKZIP.
</testo_normale>
<titolo_2>
Verificare file ZIP
</titolo_2>
<testo_normale>
La funzione <code>is_zipfile()</code> ritorna un booleano che indica se il nome di file passato come argomento faccia riferimento o meno a un archivio ZIP valido.
</testo_normale>
<py_code>
#  zipfile_is_zipfile.py
</py_code>
<testo_normale>
Se il file non esiste, <code>is_zipfile()</code> ritorna <code>False</code>
</testo_normale>
<py_output>
$ python3  zipfile_is_zipfile.py
</py_output>
<titolo_2>
Leggere i Metadati da un Archivio
</titolo_2>
<testo_normale>
Si usi la classe <code>Zipfile</code> per lavorare direttamente con un archivio ZIP. Essa supporta sia metodi per leggere dati riguardo archivi esistenti che per modificare gli archivi aggiungendo file.
</testo_normale>
<py_code>
# zipfile_namelist.py
</py_code>
<testo_normale>
Il metodo <code>namelist()</code> ritorna i nomi dei file di un archivio esistente.
</testo_normale>
<py_output>
$ python3 zipfile_namelist.py
</py_output>
<testo_normale>
L'elenco di nomi è l'unica parte di informazioni disponibili dall'archivio. Per accedere a tutti i metadati circa il contenuto dello ZIP si usino i metodi <code>infolist()</code> oppure <code>getinfo()</code>.
</testo_normale>
<py_code>
# zipfile_infolist.py
</py_code>
<testo_normale>
Ci sono campi addizionali, oltre a quelli stampati qui, ma trascodificare i valori in qualcosa che abbia una qualsiasi utilità richiede una attenta lettura delle note dell'applicazione PKZIP con le specifiche del file ZIP.
</testo_normale>
<py_output>
$ python3 zipfile_infolist.py
</py_output>
<testo_normale>
Se il nome del membro di un archivio è noto in anticipo, è possibile ricavare un oggetto <code>ZipInfo</code> direttamente tramite <code>getinfo()</code>.
</testo_normale>
<py_code>
# zipfile_getinfo.py
</py_code>
<testo_normale>
Se un membro di archivio non è presente, <code>getinfo()</code> solleva una eccezione.
</testo_normale>
<py_output>
$ python3 zipfile_getinfo.py
</py_output>
<titolo_2>
Estrarre File da un Archivio
</titolo_2>
<testo_normale>
Per accedere ai dati di un membro di un archivio, si usi il metodo <code>read()</code>, passando il nome del membro.
</testo_normale>
<py_code>
# zipfile_read.py
</py_code>
<testo_normale>
I dati, se necessario, sono automaticamente decompressi.
</testo_normale>
<py_output>
$ python3 zipfile_read.py
</py_output>
<titolo_2>
Creare Nuovi Archivi
</titolo_2>
<testo_normale>
Per creare un nuovo archivio, si istanzi <code>ZipFile</code> con modalità <code>'w'</code>. Qualunque file esistente verrà troncato e verrà inizializzato un nuovo archivio. Per aggiungere file si usi il metodo <code>write()</code>.
</testo_normale>
<py_code>
# zipfile_write.py
</py_code>
<testo_normale>
Nella modalità predefinita, i contenuti dell'archivio non sono compressi.
</testo_normale>
<py_output>
$ python3 zipfile_write.py
</py_output>
<testo_normale>
Per aggiungere compressione, è richiesto il modulo <strong>zlib</strong>. Se <strong>zlib</strong> è disponibile, la modalità di compressione per i singoli file o per l'intero archivio può essere impostata usando <code>zipfile.ZIP_DEFLATED</code>. La modalità di compressione predefinita è <code>zipfile_ZIP_STORED</code>, che aggiunge file all'archivio senza comprimerli.
</testo_normale>
<py_code>
# zipfile_write_compression.py
</py_code>
<testo_normale>
In questo caso, il membro dell'archivio è compresso.
</testo_normale>
<py_output>
$ python3 zipfile_write_compression.py
</py_output>
<titolo_2>
Usare Nomi di Membri di Archivio Sostitutivi
</titolo_2>
<testo_normale>
Per aggiungere un file a un archivio usando un nome diverso da quello originale si usi l'argomento <code>arcname</code> per <code>write()</code>.
</testo_normale>
<py_code>
# zipfile_write_arcname.py
</py_code>
<testo_normale>
Non vi è traccia del nome file originale nell'archivio.
</testo_normale>
<py_output>
$ python3 zipfile_write_arcname.py
</py_output>
<titolo_2>
Scrivere Dati da Sorgenti Diverse da File
</titolo_2>
<testo_normale>
Talvolta è necessario scrivere verso un archivio ZIP usando dati che non provengono da un file esistente. Piuttosto che scrivere dati a un file, quindi aggiungere lo stesso al file ZIP, si usi il metodo <code>writestr()</code> che aggiunge una stringa di byte all'archivio direttamente.
</testo_normale>
<py_code>
# zipfile_writestr.py
</py_code>
<testo_normale>
In questo caso, l'argomento <code>compress_type</code> di <code>ZipFile</code> è stato usato per comprimere i dati visto che <code>writestr()</code> non prevede un argomento che specifichi la compressione.
</testo_normale>
<py_output>
$ python3 zipfile_writestr.py
</py_output>
<titolo_2>
Scrivere con una Istanza di ZipInfo
</titolo_2>
<testo_normale>
Normalmente la data di modifica viene calcolata quando un file o una stringa vengono aggiunti all'archivio. Una istanza di <code>ZipInfo</code> può essere passata a <code>writestr()</code> per definire la data di modifica e altri metadati.
</testo_normale>
<py_code>
# zipfile_writestr_zipinfo.py
</py_code>
<testo_normale>
In questo esempio, l'orario modificato viene impostato all'orario corrente, i dati sono compressi, e viene usato un valore <code>False</code> per <code>create_system</code>. Viene anche associato un semplice commento al nuovo file.
</testo_normale>
<py_output>
$ python3 zipfile_writestr_zipinfo.py
</py_output>
<titolo_2>
Aggiungere File
</titolo_2>
<testo_normale>
Oltre alla creazione di nuovi archivi, è possibile aggiungere in un archivio esistente, oppure aggiungere un archivio a un file esistente (tipo un file <code>a.exe</code> per un archivio auto estraente). Per aprire un archivio per aggiungere un file si usi la modalità <code>'a'</code>.
</testo_normale>
<py_code>
# zipfile_append.py
</py_code>
<testo_normale>
L'archivio risultante contiene due membri:
</testo_normale>
<py_output>
$ python3 zipfile_append.py
</py_output>
<titolo_2>
Archivi ZIP Python
</titolo_2>
<testo_normale>
Python può importare moduli all'interno di un file ZIP usando <strong>zipimport</strong>, se questi archivi sono in <code>sys.path</code>. La classe <code>PyZipFile</code> può essere usata per costruire un modulo adatto per l'utilizzo con questa modalità. Il metodo supplementare <code>writepy()</code> dice a <code>PyZipFile</code> di cercare file con suffisso <code>.py</code> nella directory e aggiungere i corrispondenti file con estensione <code>.pyo</code> o <code>.pyc</code> all'archivio. Se nessuna delle forme compilate esiste, file creato e aggiunto un file <code>.pyc</code>.
</testo_normale>
<py_code>
# zipfile_pyzipfile.py
</py_code>
<testo_normale>
Con l'attributo di debut di <code>PyZipFile</code> impostato a 3, viene abilitato un debug verboso e il risultato viene prodotto mentre compile ogni file <code>.py</code> che trova.
</testo_normale>
<py_output>
$ python3 zipfile_pyzipfile.py
</py_output>
<titolo_2>
Limitazioni
</titolo_2>
<testo_normale>
Il modulo <strong>zipfile</strong> non supporta file ZIP con commenti aggiunti, o archivi multi disco. Supporta file ZIP più grandi di 4 GB che usano le estensioni ZIP64
</testo_normale>
<vedi_anche>
https://docs.python.org/3.6/library/zipfile.html|zipfile|La documentazione della libreria standard per questo modulo.
zlib.html|zlib|Libreria di compressione ZIP
tarfile.html|tarfile|Legge e scrive file tar
zipimport.html|zipimport|Importa moduli Python da archivi ZIP
</vedi_anche>
</documento_tradotto>
